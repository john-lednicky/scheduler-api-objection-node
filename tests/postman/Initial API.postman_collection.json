{
	"info": {
		"_postman_id": "a77de328-7714-4d0b-9f4c-9489a41ed77c",
		"name": "Initial API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Persons",
			"item": [
				{
					"name": "Persons - get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Persons - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const person = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"personId\", person.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\",\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const event = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"eventId\", event.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-07-04 13:00:00.00\",\r\n\t\"endDttm\" : \"2021-07-04 13:00:00.00\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 3, \r\n\t\"comment\" : \"\",\r\n\t\"updateUser\" : \"john.d.lednicky\",\r\n\t\"updateDttm\" : \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{personId}},\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"Wilberforce\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\",\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - update - invalid first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{personId}},\r\n    \"firstName\": \"Aaaaaaaaaaaaaaaaaaaaa\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\",\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{eventId}},\r\n    \"personId\": {{personId}},\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - delete one - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - get one - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - update one - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{personId}},\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"Wilberforce\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\",\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - create - invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Invalid\",\r\n    \"middleName\": \"\",\r\n    \"phone\": \"xxxxxxxxxx\",\r\n    \"email\": \"invalid.nosurname@scratch.com\",\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				}
			]
		},
		{
			"name": "Assignments",
			"item": [
				{
					"name": "Persons - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const person = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"personId\", person.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\",\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const event = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"eventId\", event.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-07-04 13:00:00.00\",\r\n\t\"endDttm\" : \"2021-07-04 13:00:00.00\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 3, \r\n\t\"comment\" : \"\",\r\n\t\"updateUser\" : \"john.d.lednicky\",\r\n\t\"updateDttm\" : \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments- get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assignments - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{eventId}},\r\n    \"personId\": {{personId}},\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - create (db error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{eventId}},\r\n    \"personId\": {{personId}},\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - create (invalid  error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"personId\": {{personId}},\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/assignments/{{personId}}/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments",
								"{{personId}}",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments- delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/assignments/{{personId}}/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments",
								"{{personId}}",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - delete one (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - delete one (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/events/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Events - get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Events - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const event = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"eventId\", event.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-07-04 13:00:00.00\",\r\n\t\"endDttm\" : \"2021-07-04 13:00:00.00\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 3, \r\n\t\"comment\" : \"\",\r\n\t\"updateUser\" : \"john.d.lednicky\",\r\n\t\"updateDttm\" : \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{eventId}}, \r\n\t\"beginDttm\" : \"2021-07-04 13:00:00.00\",\r\n\t\"endDttm\" : \"2021-07-04 13:00:00.00\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 4, \r\n\t\"comment\" : \"This event was updated.\",\r\n\t\"updateUser\" : \"john.d.lednicky\",\r\n\t\"updateDttm\" : \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - update - error (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-07-04 13:00:00.00\",\r\n\t\"endDttm\" : \"2021-07-04 13:00:00.00\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 4, \r\n\t\"comment\" : \"This event was updated.\",\r\n\t\"updateUser\" : \"john.d.lednicky\",\r\n\t\"updateDttm\" : \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/events/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				}
			]
		},
		{
			"name": "EventTypes",
			"item": [
				{
					"name": "Event Types - get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/eventTypes",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const eventType = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"eventTypeId\", eventType.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Test Event\",\r\n\t\"description\": \"\",\r\n\t\"updateUser\": \"john.d.lednicky\",\r\n\t\"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/eventTypes",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - update one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{eventTypeId}},\r\n\t\"name\": \"Updated Test Event Type\",\r\n\t\"description\": \"This event type was updated from a Postman test.\",\r\n\t\"updateUser\": \"john.d.lednicky\",\r\n\t\"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/eventTypes",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/eventTypes/{{eventTypeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes",
								"{{eventTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/eventTypes/{{eventTypeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes",
								"{{eventTypeId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Swagger",
			"item": [
				{
					"name": "Get Swagger UI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is test/html\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api-doc-ui/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api-doc-ui",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Swagger Doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api-doc",
							"host": [
								"{{host}}"
							],
							"path": [
								"api-doc"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "GoogleApi calls",
					"item": [
						{
							"name": "Get Id Token from Google",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "accessToken",
											"value": "ya29.a0ARrdaM9Fi_0mdVS6WTXIzvwBfBnIl6vz6NjXDIbbmVOlQVEPsYZ2SDgTI6SlFeFS5hoC09vnhWA_92KLLoz5Rgxsjve6gj4jabz2QN8X5eSyjt4FlIqds-GyS82If6VXxKrQmo5hKcy04mjACUOHznsauAsr",
											"type": "string"
										},
										{
											"key": "scope",
											"value": "openid profile email",
											"type": "string"
										},
										{
											"key": "audience",
											"value": {
												"e09f6bf3-423b-4d9a-965a-e03c90799fde": "630356498798-0t2bcf58i2o3akq5dbg1ju7f5knt2nlp.apps.googleusercontent.com"
											},
											"type": "any"
										},
										{
											"key": "clientId",
											"value": "630356498798-0t2bcf58i2o3akq5dbg1ju7f5knt2nlp.apps.googleusercontent.com",
											"type": "string"
										},
										{
											"key": "authUrl",
											"value": "https://accounts.google.com/o/oauth2/auth",
											"type": "string"
										},
										{
											"key": "state",
											"value": "CrossX123",
											"type": "string"
										},
										{
											"key": "redirect_uri",
											"value": "http://localhost:3333/auth/google/callback",
											"type": "string"
										},
										{
											"key": "useBrowser",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "tokenName",
											"value": "Google ID",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "implicit",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": null
							},
							"response": []
						},
						{
							"name": "GoogleApi_userinfo",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "ya29.a0ARrdaM8M197QiVt2uTe9rHnCvpw_8xGN3UF2D1hEAdOn2UlTv7Y5Alhy_-sn41uSrl8XawLSQXsQ4HAqNj4qvAuHEwPdlujgfK0q0nnL85gtL-H7kZW2KBCZ9ni2aF1HgsC2IFDwXW7We6KXwR3tK95ZG3Ud",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://openidconnect.googleapis.com/v1/userinfo",
									"protocol": "https",
									"host": [
										"openidconnect",
										"googleapis",
										"com"
									],
									"path": [
										"v1",
										"userinfo"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Google auth redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									"const googleLoginUrl = 'https://accounts.google.com/o/oauth2/v2/auth?response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3333%2Fauth%2Fgoogle%2Fcallback&scope=profile%20openid%20email&client_id=630356498798-0t2bcf58i2o3akq5dbg1ju7f5knt2nlp.apps.googleusercontent.com';\r",
									"pm.test(\"Location header is correct\", () => {\r",
									"  pm.expect(pm.response.headers.get('Location')).to.eql(googleLoginUrl);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/google",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"google"
							]
						}
					},
					"response": []
				},
				{
					"name": "Google profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijk5MWIwNjM2YWFkYTM0MWM1YTA4ZTBkOGYyNDA2OTcyMDY0ZGM4ZWQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI0MDc0MDg3MTgxOTIuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI0MDc0MDg3MTgxOTIuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTExNjE0MDcyMzc5MzE4Njc3NTMiLCJlbWFpbCI6InRlc3QubGVkbmlja3lAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJZXzF0UXdWS243RFYtLVp3TlRBLWVBIiwibmFtZSI6IlRlc3QgTGVkbmlja3kiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKekxsbUtsUmw0OG1Wc3RlYnVBSUR3VTRvWmM1V0h2ZG0ybUt5RmI9czk2LWMiLCJnaXZlbl9uYW1lIjoiVGVzdCIsImZhbWlseV9uYW1lIjoiTGVkbmlja3kiLCJsb2NhbGUiOiJlbiIsImlhdCI6MTYzMTA3MTQwOSwiZXhwIjoxNjMxMDc1MDA5fQ.fZwafZZ7DPUXahz0NhyL2C9-mtGr_ZLlpatYhd8cF8XGWdMOWS_UtWOeXzeaaaOFA90Smi5vx5Lc8x4mS3zqAmEaKu5w-szfUwar2NPNm0mwGjRdtVFuYBxUqgWgqbfIZWOsoMbygYDqi0W7HGCzeePyjz-tGuNQ5thnNxE8BRbUxrKCIz_ZSp_CyRzfelGqAgnDwrWhU6YYarNu5c5JphQ17yRaS1TnyK3Q6arqRqZT4F7jmQnaCoV_xAE6fW0NCD2zywVZZTU3mf66GIYhuxZtoh40EATS6Zic0cvFR_JnVf5iUrb98Ng9AqGjbgAeamRqk28hq2t_n4o8FDMhlg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/auth/google/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"google",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}