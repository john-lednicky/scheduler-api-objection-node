{
	"info": {
		"_postman_id": "a77de328-7714-4d0b-9f4c-9489a41ed77c",
		"name": "Initial API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "pubs",
					"item": [
						{
							"name": "openid-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"const configuration = pm.response.json();\r",
											"\r",
											"let host = pm.environment.get('dexhost').replace('{{dexdomain}}',pm.environment.get('dexdomain'));\r",
											"//host = 'http://dex.lednicky.app:5556';\r",
											"\r",
											"pm.test(\"token payload includes expected endpoints\", () => {\r",
											"    pm.expect(configuration.issuer).to.equal(host);\r",
											"    pm.expect(configuration.authorization_endpoint).to.equal(host + '/auth');\r",
											"    pm.expect(configuration.jwks_uri).to.equal(host + '/keys');\r",
											"    pm.expect(configuration.token_endpoint).to.equal(host + '/token');\r",
											"    pm.expect(configuration.userinfo_endpoint).to.equal(host + '/userinfo');\r",
											"});\r",
											"\r",
											"pm.environment.set('iss',configuration.issuer);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dexhost}}/.well-known/openid-configuration",
									"host": [
										"{{dexhost}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "jwks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"https://auth0.com/blog/navigating-rs256-and-jwks/\r",
											"alg: is the algorithm for the key\r",
											"kty: is the key type\r",
											"use: is how the key was meant to be used. For the example above, sig represents signature verification.\r",
											"x5c: is the x509 certificate chain\r",
											"e: is the exponent for a standard pem\r",
											"n: is the moduluos for a standard pem\r",
											"kid: is the unique identifier for the key\r",
											"x5t: is the thumbprint of the x.509 cert (SHA-1 thumbprint)\r",
											"*/\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.environment.set('keys',pm.response.json().keys);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dexhost}}/keys",
									"host": [
										"{{dexhost}}"
									],
									"path": [
										"keys"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "authorization_code (local)",
					"item": [
						{
							"name": "00 sign-out (oauth2-proxy)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{oauthhost}}/sign_out",
									"host": [
										"{{oauthhost}}"
									],
									"path": [
										"sign_out"
									]
								}
							},
							"response": []
						},
						{
							"name": "01 start (oauth2-proxy)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"token\", null);\r",
											"pm.environment.set(\"auth_code\", null);\r",
											"pm.environment.set(\"access_token\", null);\r",
											"pm.environment.set(\"id_token\", null);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"const location = postman.getResponseHeader(\"Location\")\r",
											"\r",
											"pm.test(\"location header includes 'dex'\", () => {\r",
											"    pm.expect(location).to.include('dex');\r",
											"});\r",
											"\r",
											"pm.test(\"location header includes 'approval_prompt='\", () => {\r",
											"    pm.expect(location).to.include('approval_prompt=');\r",
											"    const approval_prompt = location.match(/approval_prompt=([^&]*)/)[1];\r",
											"    pm.environment.set(\"approval_prompt\", approval_prompt);\r",
											"});\r",
											"\r",
											"pm.test(\"location header includes 'client_id='\", () => {\r",
											"    pm.expect(location).to.include('client_id=');\r",
											"    const client_id = location.match(/client_id=([^&]*)/)[1];\r",
											"    pm.environment.set(\"client_id\", client_id);\r",
											"});\r",
											"\r",
											"pm.test(\"location header includes 'redirect_uri='\", () => {\r",
											"    pm.expect(location).to.include('redirect_uri=');\r",
											"    const redirect_uri = location.match(/redirect_uri=([^&]*)/)[1];\r",
											"    pm.environment.set(\"redirect_uri\", redirect_uri);\r",
											"});\r",
											"\r",
											"pm.test(\"location header includes 'response_type='\", () => {\r",
											"    pm.expect(location).to.include('response_type=');\r",
											"    const response_type = location.match(/response_type=([^&]*)/)[1];\r",
											"    pm.environment.set(\"response_type\", response_type);\r",
											"});\r",
											"\r",
											"pm.test(\"location header includes 'scope='\", () => {\r",
											"    pm.expect(location).to.include('scope=');\r",
											"    const scope = location.match(/scope=([^&]*)/)[1];\r",
											"    pm.environment.set(\"scope\", scope);\r",
											"});\r",
											"\r",
											"pm.test(\"location header includes 'state='\", () => {\r",
											"    pm.expect(location).to.include('state=');\r",
											"    const state = location.match(/state=([^&]*)/)[1];\r",
											"    pm.environment.set(\"state\", state);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rd",
											"value": "/oauth/start",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{oauthhost}}/start",
									"host": [
										"{{oauthhost}}"
									],
									"path": [
										"start"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 auth (dex)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"const location = postman.getResponseHeader(\"Location\")\r",
											"\r",
											"pm.test(\"location header includes 'dex'\", () => {\r",
											"    pm.expect(location).to.include('dex');\r",
											"});\r",
											"\r",
											"\r",
											"const state = location.match(/state=(.*)(&|$)/)[1];\r",
											"pm.environment.set(\"state\", state);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dexhost}}/auth/local?client_id={{client_id}}&redirect_uri={{redirect_uri}}&state={{state}}&scope={{scope}}&response_type={{response_type}}",
									"host": [
										"{{dexhost}}"
									],
									"path": [
										"auth",
										"local"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirect_uri}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "{{response_type}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "03 login post creds (dex)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 303\", function () {\r",
											"    pm.response.to.have.status(303);\r",
											"});\r",
											"\r",
											"const location = postman.getResponseHeader(\"Location\")\r",
											"\r",
											"pm.test(\"location header includes 'approval'\", () => {\r",
											"    pm.expect(location).to.include('approval');\r",
											"});\r",
											"\r",
											"pm.test(\"location header includes 'req='\", () => {\r",
											"    pm.expect(location).to.include('req=');\r",
											"    const req = location.match(/req=([^&]*)/)[1];\r",
											"    pm.environment.set(\"req\", req);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "login",
											"value": "ann@dot.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "ann",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dexhost}}/auth/local/login?back=&state={{state}}",
									"host": [
										"{{dexhost}}"
									],
									"path": [
										"auth",
										"local",
										"login"
									],
									"query": [
										{
											"key": "back",
											"value": ""
										},
										{
											"key": "state",
											"value": "{{state}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04 confirm (dex)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 303\", function () {\r",
											"    pm.response.to.have.status(303);\r",
											"});\r",
											"\r",
											"const location = postman.getResponseHeader(\"Location\")\r",
											"\r",
											"pm.test(\"location header includes 'code'\", () => {\r",
											"    pm.expect(location).to.include('code');\r",
											"});\r",
											"const auth_code = location.match(/code=([^&]*)/)[1];\r",
											"pm.environment.set(\"auth_code\", auth_code);\r",
											"console.log(`auth_code == ${auth_code}`);\r",
											"\r",
											"pm.test(\"location header includes 'state'\", () => {\r",
											"    pm.expect(location).to.include('state');\r",
											"});\r",
											"const state = location.match(/state=([^&]*)/)[1];\r",
											"pm.environment.set(\"state\", state);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dexhost}}/approval?req={{req}}",
									"host": [
										"{{dexhost}}"
									],
									"path": [
										"approval"
									],
									"query": [
										{
											"key": "req",
											"value": "{{req}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05 callback (oauth-proxy)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 302\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"lednicky.localhost session cookie set \", function () {\r",
											"    pm.cookies.has('lednicky.localhost');\r",
											"    console.log('lednicky.localhost cookie:');\r",
											"    console.log(pm.cookies.get('lednicky.localhost'));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{oauthhost}}/callback?code={{auth_code}}&state={{state}}",
									"host": [
										"{{oauthhost}}"
									],
									"path": [
										"callback"
									],
									"query": [
										{
											"key": "code",
											"value": "{{auth_code}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Persons",
			"item": [
				{
					"name": "Persons - get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Persons - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const person = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"personId\", person.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"const event = pm.response.json();\r",
									"pm.test(\"body json has a non null event.id\", () => {\r",
									"    pm.expect(event.id).to.exist;\r",
									"    postman.setEnvironmentVariable(\"eventId\", event.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-10-13T13:00:00.000Z\",\r\n\t\"endDttm\" : \"2021-10-13T16:00:00.000Z\",\r\n    \"timeZone\": \"America/Chicago\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 3, \r\n\t\"comment\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{personId}},\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"Wilberforce\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - update - invalid first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{personId}},\r\n    \"firstName\": \"Aaaaaaaaaaaaaaaaaaaaa\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\",\r\n    \"updateUser\": \"john.d.lednicky\",\r\n    \"updateDttm\": \"2021-07-04 13:00:00.00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{eventId}},\r\n    \"personId\": {{personId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - delete one - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - get one - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - update one - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{personId}},\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"Wilberforce\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - create - invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Invalid\",\r\n    \"middleName\": \"\",\r\n    \"phone\": \"xxxxxxxxxx\",\r\n    \"email\": \"invalid.nosurname@scratch.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				}
			]
		},
		{
			"name": "Assignments",
			"item": [
				{
					"name": "Persons - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const person = pm.response.json();\r",
									"postman.setEnvironmentVariable(\"personId\", person.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"William\",\r\n    \"middleName\": \"\",\r\n    \"lastName\": \"Watkins\",\r\n    \"phone\": \"5127778888\",\r\n    \"email\": \"william.watkins@scratch.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/persons",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - create (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"const event = pm.response.json();\r",
									"pm.test(\"body json has a non null event.id\", () => {\r",
									"    pm.expect(event.id).to.exist;\r",
									"    postman.setEnvironmentVariable(\"eventId\", event.id);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-10-13T13:00:00.000Z\",\r\n\t\"endDttm\" : \"2021-10-13T16:00:00.000Z\",\r\n    \"timeZone\": \"America/Chicago\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 3, \r\n\t\"comment\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments- get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assignments - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{eventId}},\r\n    \"personId\": {{personId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - create (db error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"eventId\": {{eventId}},\r\n    \"personId\": {{personId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - create (invalid  error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"personId\": {{personId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/assignments",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/assignments/{{personId}}/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments",
								"{{personId}}",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Assignments- delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/assignments/{{personId}}/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"assignments",
								"{{personId}}",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Persons - delete one (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/persons/{{personId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"persons",
								"{{personId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - delete one (copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/events/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "TimeZones - get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/timezones",
							"host": [
								"{{host}}"
							],
							"path": [
								"timezones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Events - get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Events - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"const event = pm.response.json();\r",
									"pm.test(\"body json has a non null event.id\", () => {\r",
									"    pm.expect(event.id).to.exist;\r",
									"    postman.setEnvironmentVariable(\"eventId\", event.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-10-13T13:00:00.000Z\",\r\n\t\"endDttm\" : \"2021-10-13T16:00:00.000Z\",\r\n    \"timeZone\": \"America/Chicago\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 3, \r\n\t\"comment\" : \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"const event = pm.response.json();\r",
									"pm.test(\"body json has a non null event.id\", () => {\r",
									"    pm.expect(event.id).to.exist;\r",
									"    postman.setEnvironmentVariable(\"eventId\", event.id);\r",
									"});\r",
									"\r",
									"pm.test(\"body json has upated value\", () => {\r",
									"    pm.expect(event.comment).to.exist;\r",
									"    pm.expect(event.comment).to.equal(\"This event was updated.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{eventId}}, \r\n\t\"beginDttm\" : \"2021-10-14T13:00:00.000Z\",\r\n\t\"endDttm\" : \"2021-10-14T16:00:00.000Z\",\r\n    \"timeZone\": \"America/Chicago\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 4, \r\n\t\"comment\" : \"This event was updated.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - update - error (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"beginDttm\" : \"2021-10-14T13:00:00.000Z\",\r\n\t\"endDttm\" : \"2021-10-14T16:00:00.000Z\",\r\n    \"timeZone\": \"America/Chicago\",\r\n    \"eventTypeId\": 1,\r\n\t\"peopleNeeded\" : 4, \r\n\t\"comment\" : \"This event was updated.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"events"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/events/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				},
				{
					"name": "Events - delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/events/{{eventId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"events",
								"{{eventId}}"
							]
						},
						"description": "        "
					},
					"response": []
				}
			]
		},
		{
			"name": "EventTypes",
			"item": [
				{
					"name": "Event Types - get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/eventTypes",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"const eventType = pm.response.json();\r",
									"pm.test(\"body json has a non null eventType.id\", () => {\r",
									"    pm.expect(eventType.id).to.exist;\r",
									"    postman.setEnvironmentVariable(\"eventTypeId\", eventType.id);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Test Event\",\r\n\t\"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/eventTypes",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - update one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"const eventType = pm.response.json();\r",
									"pm.test(\"body json has upated value\", () => {\r",
									"    pm.expect(eventType.description).to.exist;\r",
									"    pm.expect(eventType.description).to.equal(\"This event type was updated from a Postman test.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{eventTypeId}},\r\n\t\"name\": \"Updated Test Event Type\",\r\n\t\"description\": \"This event type was updated from a Postman test.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/eventTypes",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/eventTypes/{{eventTypeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes",
								"{{eventTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Types - delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/eventTypes/{{eventTypeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"eventTypes",
								"{{eventTypeId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Swagger",
			"item": [
				{
					"name": "Get Swagger UI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is test/html\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api-doc-ui/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api-doc-ui",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Swagger Doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api-doc",
							"host": [
								"{{host}}"
							],
							"path": [
								"api-doc"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}