{
	"info": {
		"_postman_id": "c02c8a7a-2ba4-4b38-a40f-283b735e627f",
		"name": "dex",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "pubs",
			"item": [
				{
					"name": "openid-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"const configuration = pm.response.json();\r",
									"\r",
									"let host = pm.environment.get('dexhost').replace('{{dexdomain}}',pm.environment.get('dexdomain'));\r",
									"//host = 'http://dex.lednicky.app:5556';\r",
									"\r",
									"pm.test(\"token payload includes expected endpoints\", () => {\r",
									"    pm.expect(configuration.issuer).to.equal(host);\r",
									"    pm.expect(configuration.authorization_endpoint).to.equal(host + '/auth');\r",
									"    pm.expect(configuration.jwks_uri).to.equal(host + '/keys');\r",
									"    pm.expect(configuration.token_endpoint).to.equal(host + '/token');\r",
									"    pm.expect(configuration.userinfo_endpoint).to.equal(host + '/userinfo');\r",
									"});\r",
									"\r",
									"pm.environment.set('iss',configuration.issuer);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/.well-known/openid-configuration",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "jwks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"https://auth0.com/blog/navigating-rs256-and-jwks/\r",
									"alg: is the algorithm for the key\r",
									"kty: is the key type\r",
									"use: is how the key was meant to be used. For the example above, sig represents signature verification.\r",
									"x5c: is the x509 certificate chain\r",
									"e: is the exponent for a standard pem\r",
									"n: is the moduluos for a standard pem\r",
									"kid: is the unique identifier for the key\r",
									"x5t: is the thumbprint of the x.509 cert (SHA-1 thumbprint)\r",
									"*/\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.environment.set('keys',pm.response.json().keys);\r",
									"\r",
									"eval(pm.environment.get('pmlib_code'));\r",
									"\r",
									"const keyArray = eval(pm.environment.get('keys'));\r",
									"const rsaJwk = keyArray.find (key => key.kty==='RSA' && key.use==='sig');\r",
									"\r",
									"const keyObj = pmlib.rs.KEYUTIL.getKey(rsaJwk);\r",
									"\r",
									"const pem = pmlib.rs.KEYUTIL.getPEM(keyObj);\r",
									"console.log(pem);\r",
									"\r",
									"/*\r",
									"https://baptistout.net/posts/convert-jwks-modulus-exponent-to-pem-or-ssh-public-key/\r",
									"*/\r",
									"\r",
									"/*\r",
									"let key = btoa(encodeURIComponent(url)); \r",
									"let decodedUrl = decodeURIComponent(atob(key));\r",
									" */\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/keys",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"keys"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authorization_code (local)",
			"item": [
				{
					"name": "01 auth (dex)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", null);\r",
									"pm.environment.set(\"auth_code\", null);\r",
									"pm.environment.set(\"access_token\", null);\r",
									"pm.environment.set(\"id_token\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"pm.test(\"location header includes 'login'\", () => {\r",
									"    pm.expect(pm.response.headers.get('location')).to.include('login');\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"const state = location.match(/state=(.*)(&|$)/)[1];\r",
									"pm.environment.set(\"state\", state);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/auth/local?client_id=scheduler_authorization_code&redirect_uri=https%3A%2F%2Fjwt.io&state=verification_code_state&scope=profile email openid&response_type=code",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"auth",
								"local"
							],
							"query": [
								{
									"key": "client_id",
									"value": "scheduler_authorization_code"
								},
								{
									"key": "redirect_uri",
									"value": "https%3A%2F%2Fjwt.io"
								},
								{
									"key": "state",
									"value": "verification_code_state"
								},
								{
									"key": "scope",
									"value": "profile email openid"
								},
								{
									"key": "response_type",
									"value": "code"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 login post creds (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 303\", function () {\r",
									"    pm.response.to.have.status(303);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'approval'\", () => {\r",
									"    pm.expect(location).to.include('approval');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "ann@dot.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ann",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dexhost}}/auth/local/login?back=&state={{state}}",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"auth",
								"local",
								"login"
							],
							"query": [
								{
									"key": "back",
									"value": ""
								},
								{
									"key": "state",
									"value": "{{state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 confirm (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 303\", function () {\r",
									"    pm.response.to.have.status(303);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'code'\", () => {\r",
									"    pm.expect(location).to.include('code');\r",
									"});\r",
									"const auth_code = location.match(/code=([^&]*)/)[1];\r",
									"pm.environment.set(\"auth_code\", auth_code);\r",
									"\r",
									"pm.test(\"location header includes 'state'\", () => {\r",
									"    pm.expect(location).to.include('state');\r",
									"});\r",
									"const state = location.match(/state=([^&]*)/)[1];\r",
									"pm.environment.set(\"state\", state);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/approval?req={{state}}",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"approval"
							],
							"query": [
								{
									"key": "req",
									"value": "{{state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05 token (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"const access_token = responseJson.access_token;\r",
									"pm.environment.set(\"access_token\", access_token);\r",
									"pm.test('Json response includes access_token'), () => {\r",
									"    pm.expect(responseJson.access_token).to.be.an('object');\r",
									"}\r",
									"console.log(access_token);\r",
									"\r",
									"const id_token = responseJson.id_token;\r",
									"pm.environment.set(\"id_token\", id_token);\r",
									"pm.test('Json response includes id_token'), () => {\r",
									"    pm.expect(responseJson.id_token).to.be.an('object');\r",
									"}\r",
									"console.log(id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "scheduler_authorization_code",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "5b23d8fb-47ce-4295-81ab-f3b66974c865",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://jwt.io",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "profile",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{auth_code}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dexhost}}/token",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authorization_code (github)",
			"item": [
				{
					"name": "01 auth (dex)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"const path = 'https://github.com';\r",
									"\r",
									"jar.clear(path, function (error) {\r",
									"    if (error) {\r",
									"        console.error(`failed to clear ${path} cookies: ${error.message}`);\r",
									"    }\r",
									"    else {\r",
									"        console.log(`cleared cookies from ${path}`);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.environment.set(\"github_authenticity_token\", null);\r",
									"pm.environment.set(\"github_return_to\", null);\r",
									"pm.environment.set(\"github_timestamp\", null);\r",
									"pm.environment.set(\"github_timestamp_secret\", null);\r",
									"\r",
									"pm.environment.set(\"federated_state\", null);\r",
									"pm.environment.set(\"federated_auth_code\", null);\r",
									"\r",
									"pm.environment.set(\"token\", null);\r",
									"pm.environment.set(\"auth_code\", null);\r",
									"pm.environment.set(\"access_token\", null);\r",
									"pm.environment.set(\"id_token\", null);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'github'\", () => {\r",
									"    pm.expect(location).to.include('github');\r",
									"});\r",
									"\r",
									"pm.test(\"location header includes 'state='\", () => {\r",
									"    pm.expect(location).to.include('state=');\r",
									"});\r",
									"const state = location.match(/state=([^&]*)/)[1];\r",
									"pm.environment.set(\"federated_state\", state);\r",
									"\r",
									"pm.test(\"location header includes 'client_id='\", () => {\r",
									"    pm.expect(location).to.include('client_id=');\r",
									"});\r",
									"const client_id = location.match(/client_id=([^&]*)/)[1];\r",
									"pm.environment.set(\"federated_client_id\", client_id);\r",
									"\r",
									"pm.test(\"location header includes 'redirect_uri='\", () => {\r",
									"    pm.expect(location).to.include('redirect_uri=');\r",
									"});\r",
									"const redirect_uri = location.match(/redirect_uri=([^&]*)/)[1];\r",
									"pm.environment.set(\"federated_redirect_uri\", decodeURIComponent(redirect_uri));\r",
									"\r",
									"pm.test(\"location header includes 'scope='\", () => {\r",
									"    pm.expect(location).to.include('scope=');\r",
									"});\r",
									"const scope = location.match(/scope=([^&]*)/)[1];\r",
									"pm.environment.set(\"federated_scope\", scope);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/auth/github?client_id=scheduler_authorization_code&redirect_uri=https%3A%2F%2Fjwt.io&response_type=code&scope=profile email openid&#43;email&#43;openid",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"auth",
								"github"
							],
							"query": [
								{
									"key": "client_id",
									"value": "scheduler_authorization_code"
								},
								{
									"key": "redirect_uri",
									"value": "https%3A%2F%2Fjwt.io"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "scope",
									"value": "profile email openid"
								},
								{
									"key": "",
									"value": null
								}
							],
							"hash": "43;email&#43;openid"
						}
					},
					"response": []
				},
				{
					"name": "02 login (github)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'github'\", () => {\r",
									"    pm.expect(location).to.include('github');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://github.com/login/oauth/authorize?client_id={{federated_client_id}}&redirect_uri={{federated_redirect_uri}}&response_type=code&scope={{federated_scope}}&state={{federated_state}}",
							"protocol": "https",
							"host": [
								"github",
								"com"
							],
							"path": [
								"login",
								"oauth",
								"authorize"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{federated_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "{{federated_redirect_uri}}"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "scope",
									"value": "{{federated_scope}}"
								},
								{
									"key": "state",
									"value": "{{federated_state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 login (github sign-in UI)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const html = cheerio(pm.response.text());\r",
									"\r",
									"const github_authenticity_token = html.find('[name=\"authenticity_token\"]');\r",
									"pm.test(\"github form includes hidden field 'authenticity_token'\", () => {\r",
									"    pm.expect(github_authenticity_token.length).to.be.greaterThan(0);\r",
									"});\r",
									"pm.environment.set(\"github_authenticity_token\", github_authenticity_token.val());\r",
									"\r",
									"const github_return_to = html.find('[name=\"return_to\"]');\r",
									"pm.test(\"github form includes hidden field 'return_to'\", () => {\r",
									"    pm.expect(github_return_to.length).to.be.greaterThan(0);\r",
									"});\r",
									"pm.environment.set(\"github_return_to\", github_return_to.val());\r",
									"\r",
									"const github_timestamp = html.find('[name=\"timestamp\"]');\r",
									"pm.test(\"github form includes hidden field 'timestamp'\", () => {\r",
									"    pm.expect(github_timestamp.length).to.be.greaterThan(0);\r",
									"});\r",
									"pm.environment.set(\"github_timestamp\", github_timestamp.val());\r",
									"\r",
									"const github_timestamp_secret = html.find('[name=\"timestamp_secret\"]');\r",
									"pm.test(\"github form includes hidden field 'timestamp_secret'\", () => {\r",
									"    pm.expect(github_timestamp_secret.length).to.be.greaterThan(0);\r",
									"});\r",
									"pm.environment.set(\"github_timestamp_secret\", github_timestamp_secret.val());"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://github.com/login?client_id={{federated_client_id}}&return_to=/login/oauth/authorize/client_id={{federated_client_id}}&redirect_uri={{federated_redirect_uri}}&response_type=code&scope={{federated_scope}}&state={{federated_state}}",
							"protocol": "https",
							"host": [
								"github",
								"com"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{federated_client_id}}"
								},
								{
									"key": "return_to",
									"value": "/login/oauth/authorize/client_id={{federated_client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "{{federated_redirect_uri}}"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "scope",
									"value": "{{federated_scope}}"
								},
								{
									"key": "state",
									"value": "{{federated_state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 session (github post creds)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'github'\", () => {\r",
									"    pm.expect(location).to.include('github');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "{{github_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{github_password}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{federated_redirect_uri}}",
									"type": "text"
								},
								{
									"key": "authenticity_token",
									"value": "{{github_authenticity_token}}",
									"type": "text"
								},
								{
									"key": "return_to",
									"value": "{{github_return_to}}",
									"type": "text"
								},
								{
									"key": "timestamp",
									"value": "{{github_timestamp}}",
									"type": "text"
								},
								{
									"key": "timestamp_secret",
									"value": "{{github_timestamp_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://github.com/session",
							"protocol": "https",
							"host": [
								"github",
								"com"
							],
							"path": [
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "05 authorize (github)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code is 302 or 200\", function(){\r",
									"    if(pm.response.code === 302){\r",
									"    } else if (pm.response.code === 200) {\r",
									"    } else {\r",
									"        pm.expect.fail(`statuscode is ${pm.response.code}`);\r",
									"        return;\r",
									"    }\r",
									"});\r",
									"\r",
									"if (pm.response.code === 302) {\r",
									"/* \r",
									"If the response is 302, then the user has previously authorized.\r",
									"This redirects directly back to dex.\r",
									" */\r",
									"    const location = postman.getResponseHeader(\"Location\");\r",
									"\r",
									"    pm.test(\"location header includes 'code'\", () => {\r",
									"        pm.expect(location).to.include('code');\r",
									"    });\r",
									"    const auth_code = location.match(/code=([^&]*)/)[1];\r",
									"    pm.environment.set(\"federated_auth_code\", auth_code);\r",
									"\r",
									"    /* next request should be the dex callback */\r",
									"    postman.setNextRequest('06 callback (dex)');\r",
									"\r",
									"} else if (pm.response.code === 200) { \r",
									"/*\r",
									"If the response is 200, then github is asking the user to authorize the claims. \r",
									"Collect the hidden field values for the form submit.\r",
									"*/\r",
									"    const html = cheerio(pm.response.text());\r",
									"\r",
									"    const github_authenticity_token = html.find('[name=\"authenticity_token\"]');\r",
									"    pm.test(\"github form includes hidden field 'authenticity_token'\", () => {\r",
									"        pm.expect(github_authenticity_token.length).to.be.greaterThan(0);\r",
									"    });\r",
									"    pm.environment.set(\"github_authenticity_token\", github_authenticity_token.val());\r",
									"\r",
									"    /*\r",
									"    const github_scope = html.find('[name=\"scope\"]');\r",
									"    pm.test(\"github form includes hidden field 'scope'\", () => {\r",
									"        pm.expect(github_scope.length).to.be.greaterThan(0);\r",
									"    });\r",
									"    pm.environment.set(\"federated_scope\", github_scope.val());\r",
									"    */\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://github.com/login/oauth/authorize?client_id={{federated_client_id}}&response_type=code&scope=user:email&redirect_uri={{federated_redirect_uri}}&state={{federated_state}}",
							"protocol": "https",
							"host": [
								"github",
								"com"
							],
							"path": [
								"login",
								"oauth",
								"authorize"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{federated_client_id}}"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "scope",
									"value": "user:email"
								},
								{
									"key": "redirect_uri",
									"value": "{{federated_redirect_uri}}"
								},
								{
									"key": "state",
									"value": "{{federated_state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "05a authorize confirm (github)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'dex'\", () => {\r",
									"    pm.expect(location).to.include('dex');\r",
									"});\r",
									"\r",
									"pm.test(\"location header includes 'code'\", () => {\r",
									"    pm.expect(location).to.include('code');\r",
									"});\r",
									"const auth_code = location.match(/code=([^&]*)/)[1];\r",
									"pm.environment.set(\"federated_auth_code\", auth_code);\r",
									"\r",
									"/* get the auth code stoopid */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "authorize",
									"value": "1",
									"type": "text"
								},
								{
									"key": "authenticity_token",
									"value": "{{github_authenticity_token}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{federated_client_id}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{federated_redirect_uri}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{federated_state}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "user:email",
									"type": "text"
								},
								{
									"key": "authorize",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://github.com/login/oauth/authorize",
							"protocol": "https",
							"host": [
								"github",
								"com"
							],
							"path": [
								"login",
								"oauth",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "06 callback (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 303\", function () {\r",
									"    pm.response.to.have.status(303);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'req='\", () => {\r",
									"    pm.expect(location).to.include('req=');\r",
									"});\r",
									"if (location) {\r",
									"    const dex_req = location.match(/req=([^&]*)/)[1];\r",
									"    pm.environment.set(\"dex_req\", dex_req);\r",
									"} else {\r",
									"    pm.environment.set(\"dex_req\", '');\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/callback?code={{federated_auth_code}}&state={{federated_state}}",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"callback"
							],
							"query": [
								{
									"key": "code",
									"value": "{{federated_auth_code}}"
								},
								{
									"key": "state",
									"value": "{{federated_state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "07 approval (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 303\", function () {\r",
									"    pm.response.to.have.status(303);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'code'\", () => {\r",
									"    pm.expect(location).to.include('code');\r",
									"});\r",
									"\r",
									"if (location) {\r",
									"    const auth_code = location.match(/code=([^&]*)/)[1];\r",
									"    pm.environment.set(\"auth_code\", auth_code);\r",
									"} else {\r",
									"    pm.environment.set(\"auth_code\", '');\r",
									"}\r",
									"\r",
									"pm.test(\"location header includes 'state'\", () => {\r",
									"    pm.expect(location).to.include('state');\r",
									"});\r",
									"if (location) {\r",
									"    const state = location.match(/state=([^&]*)/)[1];\r",
									"    pm.environment.set(\"state\", state);\r",
									"} else {\r",
									"    pm.environment.set(\"state\", '');\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/approval?req={{dex_req}}",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"approval"
							],
							"query": [
								{
									"key": "req",
									"value": "{{dex_req}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "08 token (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"const access_token = responseJson.access_token;\r",
									"pm.environment.set(\"access_token\", access_token);\r",
									"console.log(access_token);\r",
									"\r",
									"const id_token = responseJson.id_token;\r",
									"pm.environment.set(\"id_token\", id_token);\r",
									"console.log(id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "scheduler_authorization_code",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "5b23d8fb-47ce-4295-81ab-f3b66974c865",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://jwt.io",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "profile",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{auth_code}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dexhost}}/token",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "id_token",
			"item": [
				{
					"name": "01 auth (dex)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", null);\r",
									"pm.environment.set(\"auth_code\", null);\r",
									"pm.environment.set(\"access_token\", null);\r",
									"pm.environment.set(\"id_token\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"pm.test(\"location header includes 'login'\", () => {\r",
									"    pm.expect(pm.response.headers.get('location')).to.include('login');\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"const state = location.match(/state=(.*)(&|$)/)[1];\r",
									"pm.environment.set(\"state\", state);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/auth/local?client_id=scheduler_authorization_code&redirect_uri=https%3A%2F%2Fjwt.io&scope=profile email openid&response_type=id_token&nonce={{nonce}}",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"auth",
								"local"
							],
							"query": [
								{
									"key": "client_id",
									"value": "scheduler_authorization_code"
								},
								{
									"key": "redirect_uri",
									"value": "https%3A%2F%2Fjwt.io"
								},
								{
									"key": "scope",
									"value": "profile email openid"
								},
								{
									"key": "response_type",
									"value": "id_token"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "03 login post creds (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 303\", function () {\r",
									"    pm.response.to.have.status(303);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'approval'\", () => {\r",
									"    pm.expect(location).to.include('approval');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "ann@dot.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ann",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dexhost}}/auth/local/login?back=&state={{state}}",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"auth",
								"local",
								"login"
							],
							"query": [
								{
									"key": "back",
									"value": ""
								},
								{
									"key": "state",
									"value": "{{state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "04 confirm (dex)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 303\", function () {\r",
									"    pm.response.to.have.status(303);\r",
									"});\r",
									"\r",
									"const location = postman.getResponseHeader(\"Location\")\r",
									"\r",
									"pm.test(\"location header includes 'access_token'\", () => {\r",
									"    pm.expect(location).to.include('access_token');\r",
									"});\r",
									"const access_token = location.match(/access_token=([^&]*)/)[1];\r",
									"pm.environment.set(\"access_token\", access_token);\r",
									"console.log(access_token);\r",
									"\r",
									"pm.test(\"location header includes 'id_token'\", () => {\r",
									"    pm.expect(location).to.include('id_token');\r",
									"});\r",
									"const id_token = location.match(/id_token=([^&]*)/)[1];\r",
									"pm.environment.set(\"id_token\", id_token);\r",
									"console.log(id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dexhost}}/approval?req={{state}}",
							"host": [
								"{{dexhost}}"
							],
							"path": [
								"approval"
							],
							"query": [
								{
									"key": "req",
									"value": "{{state}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "trash",
			"item": [
				{
					"name": "05a authorize (github)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://github.com/login?client_id={{federated_client_id}}&return_to=/login/oauth/authorize?client_id=6b15b463ebe6fab696f4&redirect={{federated_redirect_uri}}&response_type=code&scope=user email&state=hheiscghj5pise27yihw6dv5k",
							"protocol": "https",
							"host": [
								"github",
								"com"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{federated_client_id}}"
								},
								{
									"key": "return_to",
									"value": "/login/oauth/authorize?client_id=6b15b463ebe6fab696f4"
								},
								{
									"key": "redirect",
									"value": "{{federated_redirect_uri}}"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "scope",
									"value": "user email"
								},
								{
									"key": "state",
									"value": "hheiscghj5pise27yihw6dv5k"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}