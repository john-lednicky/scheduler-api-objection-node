## OAuth2 Proxy Config File
## https://github.com/oauth2-proxy/oauth2-proxy (provided template)

## <addr>:<port> to listen on for HTTP/HTTPS clients
 # http_address = "0.0.0.0:4180"
 https_address = "0.0.0.0:443"

## skip SSL checking for HTTPS requests
# This can only be false if the CA of the dex cert is trusted in the oauth2-proxy Docker image.
 ssl_insecure_skip_verify = false 

## TLS Settings
tls_cert_file = "/etc/proxy/lednicky.localhost.crt"
tls_key_file = "/etc/proxy/lednicky.localhost.decrypted.key"

## Are we running behind a reverse proxy? Will not accept headers like X-Real-Ip unless this is set.
reverse_proxy = false

# These pass request headers to the upstream server.
pass_access_token = true
pass_authorization_header = true

# These pass response headers to the downstream client.
# set_xauthrequest = true
# set_authorization_header = true

## the OAuth Redirect URL.
# defaults to the "https://" + requested host header + "/oauth2/callback"
redirect_url = "https://lednicky.localhost/oauth2/callback"

## The OAuth provider
provider = "oidc"
provider_display_name = "Dex"
oidc_issuer_url = "https://lednicky.localhost/dex"
scope = "profile email openid"

skip_oidc_discovery = true
oidc_jwks_url = "https://lednicky.localhost/dex/keys"
login_url = "https://lednicky.localhost/dex/auth"
redeem_url = "https://lednicky.localhost/dex/token"
profile_url = "https://lednicky.localhost/dex/userinfo"

## The OAuth Client ID, Secret
client_id = "lednicky.localhost"
client_secret = "3efda189-2102-4984-971f-664a547036a6"

## the http url(s) of the upstream endpoint. If multiple, routing is based on path
upstreams = [
    "https://mocktarget.apigee.net/echo",
    "https://dex.lednicky.localhost/dex/",
    "http://app:3333/api/",
]

## bypass authentication for requests that match the method & path. Format: method=path_regex OR path_regex alone for all methods
 skip_auth_routes = [
    "GET=^/dex.*",
    "POST=^/dex.*",
    # "GET=^/api.*",
    # "POST=^/api.*",
    # "PUT=^/api.*",
    # "DELETE=^/api.*",
    "GET=^/api/api-doc.*",
    "POST=^/api/api-doc.*",
 ]

## Logging configuration
#logging_filename = ""
#logging_max_size = 100
#logging_max_age = 7
#logging_local_time = true
#logging_compress = false
#standard_logging = true
#standard_logging_format = "[{{.Timestamp}}] [{{.File}}] {{.Message}}"
request_logging = true # default
#request_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
auth_logging = true # default
#auth_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] [{{.Status}}] {{.Message}}"

## pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream
# pass_basic_auth = true
# pass_user_headers = true
## pass the request Host Header to upstream
## when disabled the upstream Host is used as the Host Header
# pass_host_header = true

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"
email_domains = [
    "*"
]

## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"
# pass_access_token = false

## Authenticated Email Addresses File (one email per line)
# authenticated_emails_file = ""

## Htpasswd File (optional)
## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -B" for bcrypt encryption
## enabling exposes a username/login signin form
# htpasswd_file = ""

## Templates
## optional directory with custom sign_in.html and error.html
# custom_templates_dir = ""

## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
 cookie_name = "lednicky.localhost"
 cookie_secret = "j2IrsbUPEfzJLtUyiCoSZQ=="
 # cookie_domains = ""
 cookie_expire = "24h"
 cookie_refresh = "1h"
 cookie_secure = true 
 cookie_httponly = true