const swaggerJsdoc = require('swagger-jsdoc');

exports.getDoc = () => {
  const options = {
    definition: {
      openapi: '3.0.0',
      info: {
        title: 'Scheduler API',
        version: '0.1.0',
        description:
          'An API to manage persons, event types, events, and assignments.',
        license: {
          name: 'MIT',
          url: 'https://spdx.org/licenses/MIT.html',
        },
        contact: {
          name: 'John Lednicky',
          url: 'https://github.com/john-lednicky',
          email: 'john.d.lednicky@gmail.com',
        },
      },
      servers: [
        {
          url: 'http://localhost:3333',
        },
      ],
      components: {
        schemas: {
          "Message": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "title": "Message",
            "description": "A message returned after some successful operations, such as deletes.",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "A description of the result.",
                "example": "deleted person 44."
              }
            }
          },
          "ErrorMessage": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "title": "ErrorMessage",
            "description": "The message returned when an error is encountered.",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "A description of the error.",
                "example": "Error message and possibly a stack trace, depending on environment."
              }
            }
          },
          "Person": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "title": "Person",
            "description": "A person who can be assigned to an event.",
            "type": "object",
            "required": [
              "firstName",
              "lastName",
              "updateUser",
              "updateDttm"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique id of this person, autogenerated in the database.",
                "example": 10
              },
              "firstName": {
                "type": "string",
                "description": "The first name of the person.",
                "minLength": 1,
                "maxLength": 20,
                "pattern": "^[a-zA-Z ,.'-]+$",
                "example": "John"
              },
              "middleName": {
                "type": "string",
                "description": "The optional middle name of the person.",
                "minLength": 0,
                "maxLength": 20,
                "pattern": "^[a-zA-Z ,.'-]*$",
                "example": "D."
              },
              "lastName": {
                "type": "string",
                "description": "The last name of the person",
                "minLength": 1,
                "maxLength": 20,
                "pattern": "^[a-zA-Z ,.'-]+$",
                "example": "Lednicky"
              },
              "phone": {
                "type": "string",
                "description": "The phone number of the person with only 10 digits and no punctuation or spaces.",
                "minLength": 0,
                "maxLength": 10,
                "pattern": "^(\\d{10})?$",
                "example": "5124715689"
              },
              "email": {
                "type": "string",
                "description": "The email address of the person.",
                "minLength": 0,
                "maxLength": 200,
                "pattern": "^([^\\s@]+@[^\\s@]+.[^\\s@]+)?$",
                "example": "john.d.lednicky@dot.com"
              },
              "updateUser": {
                "type": "string",
                "description": "The username of the person who last updated this person.",
                "minLength": 1,
                "maxLength": 45,
                "pattern": "^[a-zA-Z0-9 .-@]+$",
                "example": "john.d.lednicky"
              },
              "updateDttm": {
                "type": "string",
                "description": "The date and time when this person was last updated.",
                "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}(.\\d{2})?$",
                "example": "2021-03-08 11:00:00"
              }
            }
          }
        }
      }
    },
    apis: ['./routes/*.js']
  };

  return swaggerJsdoc(options);
};
